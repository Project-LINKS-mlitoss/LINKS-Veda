import { console } from "node:inspector";
import Papa, { type ParseResult } from "papaparse";
import type {
	UC19_01_倉庫業登録申請書,
	UC19_02_倉庫業実績報告書,
} from "~/models/useCase19";

const UC19_01_倉庫業登録申請書データ_URL =
	"https://assets.cms.dev.links-veda.mlit.go.jp/assets/df/fd2c5c-c5ef-4c0f-93f1-e39600a1904d/01_倉庫業登録申請書データ_040101.csv";
const UC19_02_倉庫業実績報告書データ_URL =
	"https://assets.cms.dev.links-veda.mlit.go.jp/assets/c6/53af93-a294-44bc-8de6-72f8a7ddd820/02_倉庫業実績報告書データ_040101.csv";

const getSource = (url: string): string => {
	const result = url.match(/.+UC19_(\d+)_(?<name>.+)\.(.+)/);
	return result?.groups?.name ?? "不明";
};

export class UseCase19Repository {
	async getUC19_01_倉庫業登録申請書データ(): Promise<
		UC19_01_倉庫業登録申請書[]
	> {
		const results = await this.parseCsv<UC19_01_倉庫業登録申請書>(
			UC19_01_倉庫業登録申請書データ_URL,
		);

		// 高速化のため不要なレコードとカラムをここで落としている
		return results
			.filter((r) => r.事業者の所在地)
			.map((r) => {
				return {
					事業者の所在地: r.事業者の所在地,
					事業者所在地_緯度: r.事業者所在地_緯度,
					事業者所在地_経度: r.事業者所在地_経度,
					事業者の氏名又は名称: r.事業者の氏名又は名称,
					事業者ID: r.事業者ID,
					代表者名: r.代表者名,
					営業所の名称: r.営業所の名称,
					営業所ID: r.営業所ID,
					営業所の所在地: r.営業所の所在地,
					資本金又は出資の総額_資本金又は出資の別:
						r.資本金又は出資の総額_資本金又は出資の別,
					資本金又は出資の総額_総額: r.資本金又は出資の総額_総額,
					倉庫の名称: r.倉庫の名称,
					倉庫ID: r.倉庫ID,
					倉庫の所在地: r.倉庫の所在地,
					倉庫所在地_緯度: r.倉庫所在地_緯度,
					倉庫所在地_経度: r.倉庫所在地_経度,
					倉庫の種類: r.倉庫の種類,
					保管物品の種類: r.保管物品の種類,
					主要構造: r.主要構造,
					"倉庫の種別及び保管物品の種類（詳細）":
						r["倉庫の種別及び保管物品の種類（詳細）"],
					建築年月日又は建築完了予定年月日: r.建築年月日又は建築完了予定年月日,
					土地及び倉庫に係る使用権原の状況_土地:
						r.土地及び倉庫に係る使用権原の状況_土地,
					土地及び倉庫に係る使用権原の状況_建物:
						r.土地及び倉庫に係る使用権原の状況_建物,
					"1階の規模_面積": r["1階の規模_面積"],
					"2階の規模_面積": r["2階の規模_面積"],
					"3階の規模_面積": r["3階の規模_面積"],
					"4階の規模_面積": r["4階の規模_面積"],
					"5階の規模_面積": r["5階の規模_面積"],
					"6階の規模_面積": r["6階の規模_面積"],
					合計_面積: r.合計_面積,
					構造の詳細_基礎_柱下: r.構造の詳細_基礎_柱下,
					構造の詳細_基礎_壁下: r.構造の詳細_基礎_壁下,
					構造の詳細_骨組み_小屋組み: r.構造の詳細_骨組み_小屋組み,
					構造の詳細_骨組み_軸組み: r.構造の詳細_骨組み_軸組み,
					構造の詳細_骨組み_床組み: r.構造の詳細_骨組み_床組み,
					構造の詳細_壁_外壁: r.構造の詳細_壁_外壁,
					構造の詳細_壁_間仕切り壁: r.構造の詳細_壁_間仕切り壁,
					構造の詳細_壁_防火壁: r.構造の詳細_壁_防火壁,
					構造の詳細_屋根: r.構造の詳細_屋根,
					構造の詳細_天井: r.構造の詳細_天井,
					構造の詳細_床: r.構造の詳細_床,
					構造の詳細_窓_側窓: r.構造の詳細_窓_側窓,
					構造の詳細_窓_天窓: r.構造の詳細_窓_天窓,
					構造の詳細_出入口_外壁にある出入口:
						r.構造の詳細_出入口_外壁にある出入口,
					構造の詳細_出入口_間仕切り壁にある出入口:
						r.構造の詳細_出入口_間仕切り壁にある出入口,
					構造の詳細_出入口_防火壁にある出入口:
						r.構造の詳細_出入口_防火壁にある出入口,
					附属設備_消防設備: r.附属設備_消防設備,
					附属設備_防犯設備: r.附属設備_防犯設備,
					附属設備_防そ設備: r.附属設備_防そ設備,
					附属設備_遮熱装置: r.附属設備_遮熱装置,
					附属設備_その他の設備: r.附属設備_その他の設備,
					その他: r.その他,
					管理番号: r.管理番号,
					営業所管轄局: r.営業所管轄局,
					営業所管轄支局: r.営業所管轄支局,
					営業所都道府県: r.営業所都道府県,
					発券区分: r.発券区分,
					登録番号: r.登録番号,
					氏名又は名称: r.氏名又は名称,
					資本金又は出資の総額: r.資本金又は出資の総額,
					主たる営業所: r.主たる営業所,
					主たる営業所の管轄局: r.主たる営業所の管轄局,
					営業所番号: r.営業所番号,
					営業所名称: r.営業所名称,
					営業所住所: r.営業所住所,
					倉庫番号: r.倉庫番号,
					倉庫名称: r.倉庫名称,
					倉庫所在地: r.倉庫所在地,
					設置登録番号: r.設置登録番号,
					設置登録年月日: r.設置登録年月日,
					倉庫管轄局: r.倉庫管轄局,
					倉庫管轄支局: r.倉庫管轄支局,
					倉庫都道府県: r.倉庫都道府県,
					区画番号: r.区画番号,
					区画名称: r.区画名称,
					事業者所在地_都道府県名: r.事業者所在地_都道府県名,
					事業者所在地_支庁・振興局名: r.事業者所在地_支庁・振興局名,
					事業者所在地_郡・政令都市名: r.事業者所在地_郡・政令都市名,
					事業者所在地_市区町村名: r.事業者所在地_市区町村名,
					倉庫所在地_行政区域コード: r.倉庫所在地_行政区域コード,
					倉庫所在地_都道府県名: r.倉庫所在地_都道府県名,
					倉庫所在地_支庁・振興局名: r.倉庫所在地_支庁・振興局名,
					倉庫所在地_郡・政令都市名: r.倉庫所在地_郡・政令都市名,
					倉庫所在地_市区町村名: r.倉庫所在地_市区町村名,
				};
			});
	}

	async getUC19_02_倉庫業実績報告書データ(): Promise<
		UC19_02_倉庫業実績報告書[]
	> {
		const results = await this.parseCsv<UC19_02_倉庫業実績報告書>(
			UC19_02_倉庫業実績報告書データ_URL,
		);

		// 高速化のため不要なレコードとカラムをここで落としている
		return results
			.filter((r) => r.事業者名称)
			.map((r) => {
				return {
					事業者名称: r.事業者名称,
					事業者ID: r.事業者ID,
					営業所名称: r.営業所名称,
					営業所ID: r.営業所ID,
					営業所の住所: r.営業所の住所,
					年期_年度: r.年期_年度,
					年期_四半期: r.年期_四半期,
					品目名: r.品目名,
					前期末保管残高_数量: r.前期末保管残高_数量,
					当期中入庫高_数量: r.当期中入庫高_数量,
					当期中出庫高_数量: r.当期中出庫高_数量,
					当期末保管残高_数量: r.当期末保管残高_数量,
					当期末保管残高_金額: r.当期末保管残高_金額,
				};
			});
	}

	private async parseCsv<T>(url: string): Promise<T[]> {
		const response = await fetch(url);
		if (!response.ok) {
			throw new Error(`Failed to fetch CSV: ${response.statusText}`);
		}

		const text = await response.text();

		return new Promise((resolve, reject) => {
			Papa.parse(text, {
				header: true,
				dynamicTyping: true,
				skipEmptyLines: true,
				complete: (results: ParseResult<T>) => {
					if (results.errors.length > 0) {
						console.error("CSV Parsing Errors:", results.errors);
					}
					resolve(results.data);
				},
				error: (error: Error | Papa.ParseError) => {
					reject(error);
				},
			});
		});
	}
}
